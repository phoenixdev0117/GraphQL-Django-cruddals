type Query {
  readMenu(where: MenuFilterInput!): MenuType
  searchMenus(where: MenuFilterInput, orderBy: MenuOrderByInput, paginated: PaginatedInput): MenuPaginatedType
  listMenus: [MenuType!]
}

type MenuType {
  id: ID

  """The name of the menu"""
  name: String!

  """The status for enabling or disabling"""
  isActive: Boolean!
}

input MenuFilterInput {
  id: IDFilter
  name: StringFilter
  isActive: BooleanFilter
  AND: [MenuFilterInput]
  OR: [MenuFilterInput]
  NOT: MenuFilterInput
}

input IDFilter {
  exact: ID
  iexact: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  in: [ID]
  contains: ID
  icontains: ID
  startswith: ID
  istartswith: ID
  endswith: ID
  iendswith: ID
  range: ID
  isnull: Boolean
  regex: String
  iregex: String
  containedBy: ID
}

input StringFilter {
  exact: String
  iexact: String
  gt: String
  gte: String
  lt: String
  lte: String
  in: [String]
  contains: String
  icontains: String
  startswith: String
  istartswith: String
  endswith: String
  iendswith: String
  range: String
  isnull: Boolean
  regex: String
  iregex: String
}

input BooleanFilter {
  exact: Boolean
  iexact: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  in: [Boolean]
  contains: Boolean
  icontains: Boolean
  startswith: Boolean
  istartswith: Boolean
  endswith: Boolean
  iendswith: Boolean
  range: Boolean
  isnull: Boolean
  regex: String
  iregex: String
}

type MenuPaginatedType implements PaginationInterface {
  total: Int
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  indexStartObj: Int
  indexEndObj: Int
  objects: [MenuType!]
}

interface PaginationInterface {
  total: Int
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  indexStartObj: Int
  indexEndObj: Int
}

input MenuOrderByInput {
  id: OrderEnum
  name: OrderStringEnum
  isActive: OrderEnum
}

enum OrderEnum {
  ASC
  DESC
}

enum OrderStringEnum {
  ASC
  DESC
  IASC
  IDESC
}

input PaginatedInput {
  page: Int = 1
  pageSize: IntOrAll = "All"
}

"""The page size can be int or 'All'"""
scalar IntOrAll

type Mutation {
  createMenus(input: [CreateMenuInput!]): CreateMenusPayload
  updateMenus(input: [UpdateMenuInput!]): UpdateMenusPayload
  activateMenus(where: MenuFilterInput!): ActivateMenusPayload
  deactivateMenus(where: MenuFilterInput!): DeactivateMenusPayload
  deleteMenus(where: MenuFilterInput!): DeleteMenusPayload
}

type CreateMenusPayload {
  objects: [MenuType]
  errors: [ErrorsType]
}

type ErrorsType {
  objectPosition: String
  errors: [ErrorType]
}

type ErrorType {
  field: String!
  messages: [String!]!
}

input CreateMenuInput {
  """The name of the menu"""
  name: String!

  """The restaurant that the menu is a part of"""
  restaurant: ID

  """The status for enabling or disabling"""
  isActive: Boolean
}

type UpdateMenusPayload {
  objects: [MenuType]
  errors: [ErrorsType]
}

input UpdateMenuInput {
  id: ID!

  """The name of the menu"""
  name: String

  """The restaurant that the menu is a part of"""
  restaurant: ID

  """The status for enabling or disabling"""
  isActive: Boolean
}

type ActivateMenusPayload {
  objects: [MenuType]
  errors: [ErrorsType]
}

type DeactivateMenusPayload {
  objects: [MenuType]
  errors: [ErrorsType]
}

type DeleteMenusPayload {
  objects: [MenuType]
  errors: [ErrorsType]
  success: Boolean
}